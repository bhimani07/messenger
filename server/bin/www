#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore, configureSocket } = require("../app");
const http = require("http");
const db = require("../db");
const { onlineUsers, conversations } = require("../activeConnections");
const socketioJwt = require('socketio-jwt');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = configureSocket(server);

io.on("connection", (socket) => {
  socket.on("go-online", (id) => {
    if (!onlineUsers[id]) onlineUsers[id] = socket.id;

    // send the user who just went online to only active users
    for (const key of Object.keys(onlineUsers)) {
      socket.to(onlineUsers[key]).emit("add-online-user", id);
    }
  });

  socket.on("new-message", (data) => {
    // if sender field is present, then this is going to be new conversation
    if (onlineUsers[data.recipientId]) {
      socket.to(onlineUsers[data.recipientId]).emit("new-message", {
        message: data.message,
        sender: data.sender,
      });
    }

    // put sender and/or receiver in conversations map
    if (!conversations[data.message.conversationId]) {
      conversations[data.message.conversationId] = [data.message.senderId, data.recipientId];
    } else if (!conversations[data.message.conversationId].includes(data.message.senderId)) {
      conversations[data.message.conversationId].push(data.message.senderId);
    } else if (!conversations[data.message.conversationId].includes(data.recipientId)) {
      conversations[data.message.conversationId].push(data.recipientId);
    }
  });

  socket.on("seen-by-user", (data) => {
    // notify only the other user of the conversation if online
    const otherUser = conversations[data.conversationId]?.find(userId => userId !== data.seenByUserId);
    if (onlineUsers[otherUser]) {
      socket.to(onlineUsers[otherUser]).emit("seen-by-user", {
        conversationId: data.conversationId,
        messageId: data.messageId,
      });
    }
  });

  socket.on("logout", (id) => {
      // remove onlineUser
      if (onlineUsers[id]) delete onlineUsers[id];

      for (const key of Object.keys(onlineUsers)) {
        socket.to(onlineUsers[key]).emit("remove-offline-user", id);
      }

      // delete or update any relevant conversation
      for (const key in conversations) {
        if (conversations[key].length === 1 && conversations[key][0] === id) {
          delete conversations[key];
        } else {
          const removeIndex = conversations[key].indexOf(id);
          if (removeIndex !== -1) {
            conversations[key].splice(removeIndex, 1);
          }
        }
      }
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
